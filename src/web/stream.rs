// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaintEventInit {
    #[prost(string, tag = "3")]
    pub chat_room: ::prost::alloc::string::String,
    #[prost(bool, tag = "1")]
    pub init: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamVertex {
    #[prost(float, repeated, tag = "1")]
    pub position: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, repeated, tag = "2")]
    pub color: ::prost::alloc::vec::Vec<f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StreamRect {
    #[prost(float, tag = "1")]
    pub x: f32,
    #[prost(float, tag = "2")]
    pub y: f32,
    #[prost(float, tag = "3")]
    pub width: f32,
    #[prost(float, tag = "4")]
    pub height: f32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamTextEntries {
    #[prost(float, repeated, tag = "1")]
    pub position: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, repeated, tag = "2")]
    pub color: ::prost::alloc::vec::Vec<f32>,
    #[prost(string, tag = "7")]
    pub text: ::prost::alloc::string::String,
    #[prost(bool, tag = "8")]
    pub pending: bool,
    #[prost(message, optional, tag = "9")]
    pub bounds: ::core::option::Option<StreamRect>,
    #[prost(int32, tag = "10")]
    pub font_size: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamRectangle {
    #[prost(float, repeated, tag = "1")]
    pub first: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, repeated, tag = "2")]
    pub last: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, repeated, tag = "3")]
    pub color: ::prost::alloc::vec::Vec<f32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamAction {
    #[prost(message, repeated, tag = "1")]
    pub vertices: ::prost::alloc::vec::Vec<StreamVertex>,
    #[prost(message, optional, tag = "2")]
    pub text: ::core::option::Option<StreamTextEntries>,
    #[prost(message, optional, tag = "3")]
    pub rectangle: ::core::option::Option<StreamRectangle>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamActions {
    #[prost(message, repeated, tag = "1")]
    pub actions: ::prost::alloc::vec::Vec<StreamAction>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WindowPaintHistoryResponse {
    #[prost(message, repeated, tag = "1")]
    pub paints: ::prost::alloc::vec::Vec<PaintEvent>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuestionsHistoryRequest {
    #[prost(string, tag = "1")]
    pub chat_room: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuestionsHistoryResponse {
    #[prost(message, repeated, tag = "1")]
    pub questions: ::prost::alloc::vec::Vec<Question>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SendResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessage {
    #[prost(string, tag = "1")]
    pub chat_room: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaintEvent {
    #[prost(message, repeated, tag = "1")]
    pub actions: ::prost::alloc::vec::Vec<StreamActions>,
    #[prost(string, tag = "2")]
    pub chat_room: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Question {
    #[prost(string, tag = "1")]
    pub chat_room: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub text: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "3")]
    pub answers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Subscribe {
    #[prost(string, tag = "5")]
    pub chat_room: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub username: ::prost::alloc::string::String,
    #[prost(oneof = "subscribe::Data", tags = "1, 2, 3, 4")]
    pub data: ::core::option::Option<subscribe::Data>,
}
/// Nested message and enum types in `Subscribe`.
pub mod subscribe {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(message, tag = "1")]
        ChatMessage(super::ChatMessage),
        #[prost(message, tag = "2")]
        PaintEvent(super::PaintEvent),
        #[prost(message, tag = "3")]
        Question(super::Question),
        #[prost(message, tag = "4")]
        PaintEventInit(super::PaintEventInit),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    #[prost(string, tag = "1")]
    pub chat_room: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
